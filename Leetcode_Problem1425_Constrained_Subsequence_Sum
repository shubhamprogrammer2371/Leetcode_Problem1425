int constrainedSubsetSum(int* nums, int numsSize, int k) {
    struct Node {
        int value , index;
    };
    
    struct Node* heap = (struct Node*)malloc(numsSize * sizeof(struct Node));
    int heapSize = 0 , ans = nums[0];
    for (int i = 0; i < numsSize; i++) 
    {
        while ((i - heap[0].index) > k) 
        {
            // Remove elements from the heap that are out of range.
            if (heapSize > 0) 
            {
                heap[0] = heap[--heapSize];
                int currIndex = 0;
                while (1) 
                {
                    int leftChild = (currIndex * 2) + 1 , rightChild = (currIndex * 2) + 2, nextIndex = currIndex;
                    if ((leftChild < heapSize) && (heap[leftChild].value > heap[nextIndex].value)) 
                        nextIndex = leftChild;
                    if ((rightChild < heapSize) && (heap[rightChild].value > heap[nextIndex].value)) 
                        nextIndex = rightChild;
                    if (nextIndex == currIndex) 
                        break;
                    struct Node temp = heap[currIndex];
                    heap[currIndex] = heap[nextIndex];
                    heap[nextIndex] = temp;
                    currIndex = nextIndex;
                }
            } 
            else
                break;
        }
        int curr = (heapSize > 0) ? (heap[0].value + nums[i]) : nums[i];
        ans = fmax(curr,ans);
        struct Node newNode;
        newNode.value = fmax(curr,0);
        newNode.index = i;
        heap[heapSize] = newNode;
        int currIndex = heapSize;
        while (currIndex > 0) 
        {
            int parentIndex = (currIndex - 1) / 2;
            if (heap[currIndex].value > heap[parentIndex].value) 
            {
                struct Node temp = heap[currIndex];
                heap[currIndex] = heap[parentIndex];
                heap[parentIndex] = temp;
                currIndex = parentIndex;
            } 
            else
                break;
        }
        heapSize++;
    }
    free(heap);
    return ans;
}
